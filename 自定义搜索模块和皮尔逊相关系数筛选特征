#导入网络搜索模块
from sklearn.model_selection import GridSearchCV
#这个函数可以直接对模型进行机器学习并且搜索提供的参数在学习中的最优值。然后打印搜索学习结果。
def get_best_model_and_accuracy(model,params,X,y):
    grid=GridSearchCV(model,#要搜索的模型
                      params,#要尝试的参数
                      error_score=0.)#如果报错，结果是0
    grid.fit(X,y)#拟合模型和参数
    #经典的性能指标
    print("Best Accuracy:{}".format(grid.best_score_))
    #得到最佳准确率的最佳参数
    print("Best Parameters:{}".format(grid.best_params_))
    #拟合的平均时间(S)
    print("Average Time to Fit (s):{}".format(round(grid.cv_results_['mean_fit_time'].mean(),3)))
    #预测的平均时间（秒）
    #从该指标可以看出模型在真实世界的性能
    print("Average Time to Score (s):{}".format(round(grid.cv_results_['mean_score_time'].mean(),3)))

#这个逻辑用皮尔逊相关系数筛选相关特征。可以减少特征个数以优化机器学习。
from sklearn.base import TransformerMixin,BaseEstimator

class CustomCorrelationChooser(TransformerMixin,BaseEstimator):
    def __init__(self,response,cols_to_keep=[],threshold=None):
        #保存响应变量
        self.respones=response
        #保存阈值
        self.threshold=threshold
        #初始化一个变量，存放要保留的特征名
        self.cols_to_keep=cols_to_keep

    def transform(self,X):
        #转换会选择合适的列
        return X['self.cols_to_keep']

    def fit(self,X,*_):
        #创建新的DataFrame,存放特征和响应
        df=pd.concat([X, self.respones],axis=1)
        #保存高于阈值的列名称
        self.cols_to_keep=df.columns[df.corr()[df.columns[-1]].abs()>self.threshold]
        #只保留X列，删掉响应变量
        self.cols_to_keep=[c for c in self.cols_to_keep if c in X.columns]
        return self
