from sklearn.base import TransformerMixin
from sklearn.preprocessing import Imputer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import  GridSearchCV
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

df=pd.read_csv('1.csv',header=None)
df.columns=['index','x','y','z','activity']
#print(df.head())

#print(df['activity'].value_counts(normalize=True))

X=df[['x','y','z']]
#删除响应变量，建立特征矩阵
y=df['activity']
'''
#网络搜索所需的变量和实例

#需要试验的变量和实例
knn_params={'n_neighbors':[3,4,5,6]}

knn=KNeighborsClassifier()
gird=GridSearchCV(knn,knn_params)
gird.fit(X,y)

print(gird.best_score_,gird.best_params_)
'''

poly=PolynomialFeatures(degree=2,include_bias=False, interaction_only=False)
X_poly=poly.fit_transform(X)
#print(X_poly.shape)

#把数据放到DataFrame格式里面
#print(pd.DataFrame(X_poly,columns=poly.get_feature_names()).head())

#构建热力图
#sns.heatmap(pd.DataFrame(X_poly,columns=poly.get_feature_names()).corr())
#plt.show()

#设置流水线的参数
knn=KNeighborsClassifier()
pipe_params={'poly_features__degree':[1,2,3],'poly_features__interaction_only':[True,False],'classify__n_neighbors':[3,4,5,6]}
pipe=Pipeline([('poly_features',poly),('classify',knn)])

#进行网格搜索
grid=GridSearchCV(pipe,pipe_params)
grid.fit(X,y)

print(grid.best_score_,grid.best_params_)
