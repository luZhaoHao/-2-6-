import pandas as pd
from sklearn.base import TransformerMixin
from sklearn.preprocessing import Imputer
from sklearn.pipeline import Pipeline

class CustomCategoryImputer(TransformerMixin):
    def __init__(self,cols=None):
        self.cols=cols

    def transform(self,df):
        X=df.copy()
        for col in self.cols:
            X[col].fillna(X[col].value_counts().index[0],inplace=True)
        return X

    def fit(self,*_):
        return self

class CustomQuantitativeImputer(TransformerMixin):
    def __init__(self,cols=None,strategy='mean'):
        self.cols=cols
        self.strategy=strategy

    def transform(self,df):
        X=df.copy()
        impute=Imputer(strategy=self.strategy)
        for col in self.cols:
            X[col]=impute.fit_transform(X[[col]])
        return X

    def fit(self,*_):
        return self

class CustomDummifier(TransformerMixin):
    def __init__(self,cols=None):
        self.cols=cols

    def transform(self,X):
        return pd.get_dummies(X,columns=self.cols)

    def fit(self,*_):
        return self

class CustomEncodes(TransformerMixin):
    def __init__(self,col,ordering=None):
        self.ordering=ordering
        self.col=col

    def transform(self,df):
        X=df.copy()
        X[self.col]=X[self.col].map(lambda x:self.ordering.index(x))
        return X

    def fit(self,*_):
        return self

class CustomCutter(TransformerMixin):
    def __init__(self,col,bins,labels=False):
        self.labels=labels
        self.bins=bins
        self.col=col

    def transform(self,df):
        X=df.copy()
        X[self.col]=pd.cut(X[self.col],bins=self.bins,labels=self.labels)
        return X

    def fit(self,*_):
        return self


X=pd.DataFrame({'city':['tokyo',None,'london','seattle','san francisco','tokyo'],
                        'boolean':['yes','no',None,'no','no','yes'],
                        'ordinal_column':['somewhat like','like','somewhat like','like','somewhat like','dislike'],
                         'quantitative':[1,11,-0.5,10,None,20]})
'''
cqi = CustomQuantitativeImputer(cols=['quantitative_column'], strategy='mean')
cqi.fit_transform(X)
pipe=Pipeline([("imputer",imputer),(),(),()])
'''
